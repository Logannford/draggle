{
  "version": 3,
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/apps/dashboard/components/payment/checkout-form.tsx"],"sourcesContent":["import { Button } from '../ui/button';\nimport {\n  useStripe,\n  useElements,\n  PaymentElement\n} from '@stripe/react-stripe-js';\nimport { useState } from 'react';\nimport { ReloadIcon } from '@radix-ui/react-icons';\n\nexport const CheckoutForm = ({ productPrice }: { productPrice: number }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    setLoading(true);\n    // prevent the default form submission\n    event.preventDefault();\n\n    if (!stripe || !elements) return;\n\n    const result = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: window.location.href\n      }\n    });\n\n    // update the user record with the payment id\n    console.log(result);\n    setLoading(false);\n\n    return result;\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className=\"p-5 flex flex-col gap-y-2\"\n    >\n      <div className=\"flex flex-col gap-y-4\">\n        <h3 className=\"text-2xl font-bold\">Payment: Â£{productPrice / 100}</h3>\n        <PaymentElement />\n      </div>\n      <Button\n        type=\"submit\"\n        disabled={!stripe}\n      >\n        {loading ? <ReloadIcon className=\"w-3 h-3 animate-spin\" /> : 'Submit'}\n      </Button>\n    </form>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;AASO,MAAM,eAAe,CAAC,EAAE,YAAY,EAA4B;IACrE,MAAM,SAAS;IACf,MAAM,WAAW;IAEjB,MAAM,CAAC,SAAS,WAAW,GAAG,4NAAS;IAEvC,MAAM,eAAe,OAAO;QAC1B,WAAW;QACX,sCAAsC;QACtC,MAAM,cAAc;QAEpB,IAAI,CAAC,UAAU,CAAC,UAAU;QAE1B,MAAM,SAAS,MAAM,OAAO,cAAc,CAAC;YACzC;YACA,eAAe;gBACb,YAAY,OAAO,QAAQ,CAAC,IAAI;YAClC;QACF;QAEA,6CAA6C;QAC7C,QAAQ,GAAG,CAAC;QACZ,WAAW;QAEX,OAAO;IACT;IAEA,qBACE,mPAAC;QACC,UAAU;QACV,WAAU;;0BAEV,mPAAC;gBAAI,WAAU;;kCACb,mPAAC;wBAAG,WAAU;;4BAAqB;4BAAW,eAAe;;;;;;;kCAC7D;;;;;;;;;;;0BAEF;gBACE,MAAK;gBACL,UAAU,CAAC;0BAEV,wBAAU;oBAAY,WAAU;;;;;2BAA4B;;;;;;;;;;;;AAIrE"}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/apps/dashboard/utils/stripe/stripe-invoice.ts"],"sourcesContent":["import Stripe from 'stripe';\n\nexport const createInvoice = async (\n  user: Stripe.Customer,\n  amount: number,\n  stripe: Stripe\n): Promise<Stripe.PaymentIntent['client_secret'] | null> => {\n  if (!user || !user.id) {\n    return Promise.reject('Invalid user');\n  }\n\n  // try to create the invoice\n  try {\n    const invoice: Stripe.Invoice = await stripe.invoices.create({\n      customer: user.id,\n      description: 'Test Invoice',\n      currency: 'gbp',\n      auto_advance: false\n    });\n\n    // create an invoice item\n    /**\n     * Invoice Items represent the component lines of an invoice. An invoice item is added to an\n     * invoice by creating or updating it  with an invoice field, at which point it will be\n     * included as an invoice line item within invoice.lines.\n     */\n    await stripe.invoiceItems.create({\n      invoice: invoice?.id,\n      customer: user?.id,\n      unit_amount: amount,\n      currency: 'gbp',\n      quantity: 1\n    });\n\n    const finalizedInvoice: Stripe.Response<Stripe.Invoice> =\n        await stripe.invoices.finalizeInvoice(invoice.id, {\n          auto_advance: true\n        }),\n      paymentIntentId = finalizedInvoice?.payment_intent;\n\n    let paymentIntent: Stripe.PaymentIntent;\n\n    // if the payment intent is not a string, we need to cancel the flow\n    if (typeof paymentIntentId !== 'string') return null;\n\n    // if the payment intent is a string, we need to update it\n    await stripe.paymentIntents.retrieve(paymentIntentId);\n\n    // update the payment intent with the new payment intent id\n    paymentIntent = await stripe.paymentIntents.update(paymentIntentId, {\n      metadata: {\n        email: user?.email,\n        amount: amount\n      },\n      receipt_email: user?.email\n    });\n\n    return paymentIntent.client_secret;\n  } catch (error) {\n    console.error(error);\n    return Promise.reject(error);\n  }\n};\n"],"names":[],"mappings":";;;AAEO,MAAM,gBAAgB,OAC3B,MACA,QACA;IAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE;QACrB,OAAO,QAAQ,MAAM,CAAC;IACxB;IAEA,4BAA4B;IAC5B,IAAI;QACF,MAAM,UAA0B,MAAM,OAAO,QAAQ,CAAC,MAAM,CAAC;YAC3D,UAAU,KAAK,EAAE;YACjB,aAAa;YACb,UAAU;YACV,cAAc;QAChB;QAEA,yBAAyB;QACzB;;;;KAIC,GACD,MAAM,OAAO,YAAY,CAAC,MAAM,CAAC;YAC/B,SAAS,SAAS;YAClB,UAAU,MAAM;YAChB,aAAa;YACb,UAAU;YACV,UAAU;QACZ;QAEA,MAAM,mBACF,MAAM,OAAO,QAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE;YAChD,cAAc;QAChB,IACF,kBAAkB,kBAAkB;QAEtC,IAAI;QAEJ,oEAAoE;QACpE,IAAI,OAAO,oBAAoB,UAAU,OAAO;QAEhD,0DAA0D;QAC1D,MAAM,OAAO,cAAc,CAAC,QAAQ,CAAC;QAErC,2DAA2D;QAC3D,gBAAgB,MAAM,OAAO,cAAc,CAAC,MAAM,CAAC,iBAAiB;YAClE,UAAU;gBACR,OAAO,MAAM;gBACb,QAAQ;YACV;YACA,eAAe,MAAM;QACvB;QAEA,OAAO,cAAc,aAAa;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,OAAO,QAAQ,MAAM,CAAC;IACxB;AACF"}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/apps/dashboard/utils/stripe/stripe-customer.ts"],"sourcesContent":["import Stripe from 'stripe';\n\nexport const lookupCustomer = async (\n  email: string,\n  stripe: Stripe\n): Promise<Stripe.Customer | null> => {\n  try {\n    const existingCustomer: Stripe.Response<Stripe.ApiList<Stripe.Customer>> =\n      await stripe.customers.list({\n        email: email,\n        limit: 1\n      });\n    if (existingCustomer.data.length) {\n      return existingCustomer.data[0];\n    }\n\n    return null;\n  } catch (error) {\n    console.error(error);\n\n    return Promise.reject(error);\n  }\n};\n\nexport const createCustomer = async (\n  customerParams: Stripe.CustomerCreateParams,\n  stripe: Stripe\n): Promise<Stripe.Customer> => {\n  try {\n    return await stripe.customers.create(customerParams);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n"],"names":[],"mappings":";;;;AAEO,MAAM,iBAAiB,OAC5B,OACA;IAEA,IAAI;QACF,MAAM,mBACJ,MAAM,OAAO,SAAS,CAAC,IAAI,CAAC;YAC1B,OAAO;YACP,OAAO;QACT;QACF,IAAI,iBAAiB,IAAI,CAAC,MAAM,EAAE;YAChC,OAAO,iBAAiB,IAAI,CAAC,EAAE;QACjC;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QAEd,OAAO,QAAQ,MAAM,CAAC;IACxB;AACF;AAEO,MAAM,iBAAiB,OAC5B,gBACA;IAEA,IAAI;QACF,OAAO,MAAM,OAAO,SAAS,CAAC,MAAM,CAAC;IACvC,EAAE,OAAO,OAAO;QACd,OAAO,QAAQ,MAAM,CAAC;IACxB;AACF"}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/apps/dashboard/utils/stripe/stripe.ts"],"sourcesContent":["import Stripe from 'stripe';\nimport { createInvoice } from './stripe-invoice';\nimport { lookupCustomer, createCustomer } from './stripe-customer';\nimport { StripeProduct } from '../../types/StripeProduct';\n\nconst stripe = new Stripe(process.env.NEXT_PUBLIC_STRIPE_SECRET_KEY as string, {\n  apiVersion: '2023-10-16'\n});\n\nexport const createSubscription = async (\n  userEmail: string,\n  currentPlan: StripeProduct,\n): Promise<{\n  invoice: string;\n  paymentPrice: number;\n} | null> => {\n  if(!currentPlan) throw new Error('No plan provided.')\n\n  let currentUser: Stripe.Customer | null = null;\n\n  // try to find the customer via the email\n  const isExistingCustomer = await lookupCustomer(userEmail, stripe);\n\n  if (isExistingCustomer) {\n    currentUser = isExistingCustomer;\n  }\n\n  if (!isExistingCustomer) {\n    const newCustomerParams: Stripe.CustomerCreateParams = {\n      email: userEmail\n    };\n\n    try {\n      currentUser = await createCustomer(newCustomerParams, stripe);\n\n      if (!currentUser) return null;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  if (!currentPlan || !currentUser) return null;\n\n  const invoice = await createInvoice(\n    currentUser,\n    // @ts-expect-error\n    currentPlan.default_price?.unit_amount,\n    stripe\n  );\n\n  if (!invoice) return null;\n\n  return {\n    invoice,\n    // @ts-expect-error\n    paymentPrice: currentPlan.default_price.unit_amount\n  };\n};\n"],"names":[],"mappings":";;;;;;;;;;AAKA,MAAM,SAAS,uTAAgE;IAC7E,YAAY;AACd;AAEO,MAAM,qBAAqB,OAChC,WACA;IAKA,IAAG,CAAC,aAAa,MAAM,IAAI,MAAM;IAEjC,IAAI,cAAsC;IAE1C,yCAAyC;IACzC,MAAM,qBAAqB,MAAM,6KAAe,WAAW;IAE3D,IAAI,oBAAoB;QACtB,cAAc;IAChB;IAEA,IAAI,CAAC,oBAAoB;QACvB,MAAM,oBAAiD;YACrD,OAAO;QACT;QAEA,IAAI;YACF,cAAc,MAAM,6KAAe,mBAAmB;YAEtD,IAAI,CAAC,aAAa,OAAO;QAC3B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC;QAChB;IACF;IAEA,IAAI,CAAC,eAAe,CAAC,aAAa,OAAO;IAEzC,MAAM,UAAU,MAAM,2KACpB,aACA,mBAAmB;IACnB,YAAY,aAAa,EAAE,aAC3B;IAGF,IAAI,CAAC,SAAS,OAAO;IAErB,OAAO;QACL;QACA,mBAAmB;QACnB,cAAc,YAAY,aAAa,CAAC,WAAW;IACrD;AACF"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/apps/dashboard/components/payment/payment-card-button.tsx"],"sourcesContent":["'use client';\n// component imports\nimport { Button } from '../ui/button';\nimport { Dialog, DialogContent, DialogTrigger } from '../ui/dialog';\nimport { CheckoutForm } from './checkout-form';\nimport { ReloadIcon } from '@radix-ui/react-icons';\n\n// method imports\nimport { createSubscription } from '../../utils/stripe/stripe';\n\n// React imports\nimport { useState } from 'react';\n\n//type imports\nimport type { StripeProduct } from '../../types/StripeProduct';\n\n// stripe imports\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements } from '@stripe/react-stripe-js';\n\n// supabase imports\nimport { createClient } from '../../utils/supabase/client';\n\nconst stripe = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY as string);\n\n// methods\nconst getClientSecret = async (\n  product: StripeProduct\n): Promise<{\n  invoice: string;\n  paymentPrice: number;\n} | null> => {\n  const { data } = await createClient().auth.getUser();\n\n  const user = data.user;\n\n  //if (!user?.email) return null;\n\n  // passing the whole product the backend.\n  // so we can determine whether it\n  const response = await createSubscription(\n    user?.email ?? 'logan@hiyield.co.uk',\n    product\n  );\n\n  if (!response || !response.invoice) return null;\n\n  return response;\n};\n\nexport function PaymentButton({ product }: { product: StripeProduct }) {\n  const [loading, setLoading] = useState<{\n    [key: string]: boolean;\n  }>({});\n\n  const [clientSecret, setClientSecret] = useState('');\n\n  const handleClientSecret = async (plan: StripeProduct) => {\n    // set the loading state for the specific product\n    setLoading((prevLoading) => ({\n      ...prevLoading,\n      [plan.id]: true\n    }));\n\n    // Create a new subscription\n    try {\n      const response = await getClientSecret(plan);\n\n      if (!response) return;\n\n      // set the client secret from the response from our endpoint\n      setClientSecret(response.invoice);\n    } catch (error) {\n      console.error(error);\n\n      // TODO: Show Sonner here on error\n    }\n\n    // reset the loading state for the specific product\n    setLoading((prevLoading) => ({\n      ...prevLoading,\n      [plan.id]: false\n    }));\n  };\n\n  const options = { clientSecret };\n\n  return (\n    <>\n      <Dialog>\n        <DialogTrigger asChild>\n          <Button\n            onClick={async () => await handleClientSecret(product)}\n            className=\"flex gap-x-2 min-w-[84px] duration-300 ease-in-out \"\n            variant={product.metadata.mostPopular ? 'secondary' : 'default'}\n          >\n            {loading[product.id] ? (\n              <ReloadIcon className=\"w-3 h-3 animate-spin\" />\n            ) : (\n              'Buy now'\n            )}\n          </Button>\n        </DialogTrigger>\n        {clientSecret ? (\n          <DialogContent showCloseButton={true}>\n            <Elements\n              stripe={stripe}\n              options={options}\n            >\n              <CheckoutForm\n                productPrice={product.default_price.unit_amount ?? 0}\n              />\n            </Elements>\n          </DialogContent>\n        ) : (\n          ''\n        )}\n      </Dialog>\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;;;;;;AAuBA,MAAM,SAAS;AAEf,UAAU;AACV,MAAM,kBAAkB,OACtB;IAKA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,mKAAe,IAAI,CAAC,OAAO;IAElD,MAAM,OAAO,KAAK,IAAI;IAEtB,gCAAgC;IAEhC,yCAAyC;IACzC,iCAAiC;IACjC,MAAM,WAAW,MAAM,qKACrB,MAAM,SAAS,uBACf;IAGF,IAAI,CAAC,YAAY,CAAC,SAAS,OAAO,EAAE,OAAO;IAE3C,OAAO;AACT;AAEO,SAAS,cAAc,EAAE,OAAO,EAA8B;IACnE,MAAM,CAAC,SAAS,WAAW,GAAG,4NAE3B,CAAC;IAEJ,MAAM,CAAC,cAAc,gBAAgB,GAAG,4NAAS;IAEjD,MAAM,qBAAqB,OAAO;QAChC,iDAAiD;QACjD,WAAW,CAAC,cAAgB,CAAC;gBAC3B,GAAG,WAAW;gBACd,CAAC,KAAK,EAAE,CAAC,EAAE;YACb,CAAC;QAED,4BAA4B;QAC5B,IAAI;YACF,MAAM,WAAW,MAAM,gBAAgB;YAEvC,IAAI,CAAC,UAAU;YAEf,4DAA4D;YAC5D,gBAAgB,SAAS,OAAO;QAClC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC;QAEd,kCAAkC;QACpC;QAEA,mDAAmD;QACnD,WAAW,CAAC,cAAgB,CAAC;gBAC3B,GAAG,WAAW;gBACd,CAAC,KAAK,EAAE,CAAC,EAAE;YACb,CAAC;IACH;IAEA,MAAM,UAAU;QAAE;IAAa;IAE/B,qBACE;kBACE,cAAA;;8BACE;oBAAe,OAAO;8BACpB,cAAA;wBACE,SAAS,UAAY,MAAM,mBAAmB;wBAC9C,WAAU;wBACV,SAAS,QAAQ,QAAQ,CAAC,WAAW,GAAG,cAAc;kCAErD,OAAO,CAAC,QAAQ,EAAE,CAAC,iBAClB;4BAAY,WAAU;;;;;mCAEtB;;;;;;;;;;;gBAIL,6BACC;oBAAe,iBAAiB;8BAC9B,cAAA;wBACE,QAAQ;wBACR,SAAS;kCAET,cAAA;4BACE,cAAc,QAAQ,aAAa,CAAC,WAAW,IAAI;;;;;;;;;;;;;;;2BAKzD;;;;;;;;AAKV"}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 353, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/apps/dashboard/components/payment/payment-card.tsx"],"sourcesContent":["import Stripe from 'stripe';\n// component imports\nimport { PaymentButton } from './payment-card-button';\nimport { ReloadIcon, CheckIcon } from '@radix-ui/react-icons';\nimport { IonSparkles } from '../ui/icons/sparkle';\n\n//type imports\nimport type { StripeProduct } from '../../types/StripeProduct';\n\nexport function PricingCard({\n  product,\n  isLoading,\n  billingPeriod\n}: {\n  product: StripeProduct;\n  isLoading: boolean;\n  billingPeriod: Stripe.PriceListParams.Recurring.Interval;\n}) {\n  return (\n    <>\n      <div\n        key={product.id}\n        className=\"\n\t\t\t\tflex flex-col bg-electric-violet-900 p-8 border border-white/20\n\t\t\t\tw-80 justify-between relative rounded-xl min-h-full h-full\n\t\t\t\"\n      >\n        <div className=\"flex flex-col justify-between h-full gap-y-8\">\n          <div className=\"flex flex-col gap-y-6 h-full\">\n            <div className=\"flex flex-col gap-y-2 w-full\">\n              <div className=\"flex flex-col gap-y-1 border-b border-black-50 pb-6\">\n                <div className=\"flex w-full justify-between items-center\">\n                  <h2 className=\"text-xl font-semibold font-poppins\">\n                    {product.name}\n                  </h2>\n                  {product.metadata.mostPopular && (\n                    <span\n                      className=\"\n                        text-white text-[0.5rem] font-bold h-min animate-shimmer\n                        py-1 px-2 border border-electric-violet-300 rounded-full\n                        font-poppins flex gap-x-1 items-center bg-electric-violet-500\n                        justify-center bg-[linear-gradient(110deg,#6725F2,45%,#8A5DDE,55%,#6725F2)] \n                        bg-[length:200%_100%] transition-colors focus:outline-none focus:ring-2 \n                        focus:ring-slate-400 focus:ring-offset-2 focus:ring-offset-slate-50\n                      \"\n                    >\n                      <IonSparkles className=\"size-2 text-yellow-400\" />\n                      Recommended\n                    </span>\n                  )}\n                </div>\n                <div className=\"flex gap-x-1 items-center\">\n                  <div className=\"flex gap-x-1 items-center\">\n                    Â£\n                    {isLoading ? (\n                      <ReloadIcon className=\"w-3 h-3 animate-spin\" />\n                    ) : (\n                      <span className=\"text-4xl font-kanit\">\n                        {product.default_price?.unit_amount\n                          ? product.default_price.unit_amount / 100\n                          : 0}\n                      </span>\n                    )}\n                  </div>\n                  <span className=\"text-xs mt-2\">/ {billingPeriod}</span>\n                </div>\n                <p className=\"text-xs font-kanit\">{product.description}</p>\n              </div>\n            </div>\n            {/** Feature list */}\n            <div className=\"flex flex-col gap-y-6 h-full justify-between\">\n              <div className=\"flex flex-col gap-y-3 font-poppins\">\n                {product.features.map((feature) => (\n                  <div\n                    key={product.id + feature.name}\n                    className=\"flex gap-x-2 text-xs items-center\"\n                  >\n                    <CheckIcon className=\"w-4 h-4 text-electric-violet-500\" />\n                    <span>{feature.name}</span>\n                  </div>\n                ))}\n              </div>\n              {/** payment trigger */}\n              <PaymentButton\n                product={product}\n                key={product.id}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AASO,SAAS,YAAY,EAC1B,OAAO,EACP,SAAS,EACT,aAAa,EAKd;IACC,qBACE;kBACE,cAAA,mPAAC;YAEC,WAAU;sBAKV,cAAA,mPAAC;gBAAI,WAAU;0BACb,cAAA,mPAAC;oBAAI,WAAU;;sCACb,mPAAC;4BAAI,WAAU;sCACb,cAAA,mPAAC;gCAAI,WAAU;;kDACb,mPAAC;wCAAI,WAAU;;0DACb,mPAAC;gDAAG,WAAU;0DACX,QAAQ,IAAI;;;;;;4CAEd,QAAQ,QAAQ,CAAC,WAAW,kBAC3B,mPAAC;gDACC,WAAU;;kEASV;wDAAa,WAAU;;;;;;oDAA2B;;;;;;;;;;;;;kDAKxD,mPAAC;wCAAI,WAAU;;0DACb,mPAAC;gDAAI,WAAU;;oDAA4B;oDAExC,0BACC;wDAAY,WAAU;;;;;6EAEtB,mPAAC;wDAAK,WAAU;kEACb,QAAQ,aAAa,EAAE,cACpB,QAAQ,aAAa,CAAC,WAAW,GAAG,MACpC;;;;;;;;;;;;0DAIV,mPAAC;gDAAK,WAAU;;oDAAe;oDAAG;;;;;;;;;;;;;kDAEpC,mPAAC;wCAAE,WAAU;kDAAsB,QAAQ,WAAW;;;;;;;;;;;;;;;;;sCAI1D,mPAAC;4BAAI,WAAU;;8CACb,mPAAC;oCAAI,WAAU;8CACZ,QAAQ,QAAQ,CAAC,GAAG,CAAC,CAAC,wBACrB,mPAAC;4CAEC,WAAU;;8DAEV;oDAAW,WAAU;;;;;;8DACrB,mPAAC;8DAAM,QAAQ,IAAI;;;;;;;2CAJd,QAAQ,EAAE,GAAG,QAAQ,IAAI;;;;;;;;;;8CASpC;oCACE,SAAS;mCACJ,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;WAhElB,QAAQ,EAAE;;;;;;AAwEvB"}},
    {"offset": {"line": 540, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 545, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/apps/dashboard/lib/hooks.ts"],"sourcesContent":["import { useDispatch, useSelector, useStore } from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch, AppStore } from '@/dashboard/store/store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n//export const useAppStore: () => AppStore = useStore;\n"],"names":[],"mappings":";;;;;;;AAKO,MAAM;AACN,MAAM,2LACb,sDAAsD"}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 559, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/apps/dashboard/components/ui/button-group.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { cn } from '../../lib/utils';\nimport { useAppDispatch } from '../../lib/hooks';\nimport { setBillingPeriod } from '../../store/user-store';\n\ntype Tab = {\n  title: string;\n  value: 'month' | 'year';\n  content?: string | React.ReactNode | any;\n};\n\nexport const ButtonGroup = ({\n  tabs: propTabs,\n  containerClassName,\n  activeTabClassName,\n  tabClassName\n}: {\n  tabs: Tab[];\n  containerClassName?: string;\n  activeTabClassName?: string;\n  tabClassName?: string;\n}) => {\n  const dispatch = useAppDispatch();\n\n  const [active, setActive] = useState<Tab>(propTabs[0]);\n\n  const handleSetBillingPeriod = (period: 'month' | 'year') => {\n    dispatch(setBillingPeriod(period));\n  };\n\n  return (\n    <div\n      className={cn(\n        'flex flex-row items-center justify-start [perspective:1000px] relative overflow-auto sm:overflow-visible no-visible-scrollbar max-w-full w-full',\n        containerClassName\n      )}\n    >\n      {propTabs.map((tab) => (\n        <button\n          key={tab.title}\n          onClick={() => {\n            setActive(tab);\n            handleSetBillingPeriod(tab.value);\n          }}\n          className={cn('rounded-full', tabClassName)}\n          style={{\n            transformStyle: 'preserve-3d'\n          }}\n        >\n          {active.value === tab.value && (\n            <motion.div\n              layoutId=\"clickedbuttonn\"\n              transition={{ type: 'spring', bounce: 0.3, duration: 0.6 }}\n              className={cn(\n                'absolute inset-0 bg-gray-200 dark:bg-zinc-800 rounded-full ',\n                activeTabClassName\n              )}\n            />\n          )}\n          <span className=\"relative block text-black dark:text-white\">\n            {tab.title}\n          </span>\n        </button>\n      ))}\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAYO,MAAM,cAAc,CAAC,EAC1B,MAAM,QAAQ,EACd,kBAAkB,EAClB,kBAAkB,EAClB,YAAY,EAMb;IACC,MAAM,WAAW;IAEjB,MAAM,CAAC,QAAQ,UAAU,GAAG,4NAAc,QAAQ,CAAC,EAAE;IAErD,MAAM,yBAAyB,CAAC;QAC9B,SAAS,gKAAiB;IAC5B;IAEA,qBACE,mPAAC;QACC,WAAW,wIACT,mJACA;kBAGD,SAAS,GAAG,CAAC,CAAC,oBACb,mPAAC;gBAEC,SAAS;oBACP,UAAU;oBACV,uBAAuB,IAAI,KAAK;gBAClC;gBACA,WAAW,wIAAG,gBAAgB;gBAC9B,OAAO;oBACL,gBAAgB;gBAClB;;oBAEC,OAAO,KAAK,KAAK,IAAI,KAAK,kBACzB,mPAAC,qLAAO,GAAG;wBACT,UAAS;wBACT,YAAY;4BAAE,MAAM;4BAAU,QAAQ;4BAAK,UAAU;wBAAI;wBACzD,WAAW,wIACT,+DACA;;;;;;kCAIN,mPAAC;wBAAK,WAAU;kCACb,IAAI,KAAK;;;;;;;eArBP,IAAI,KAAK;;;;;;;;;;AA2BxB"}},
    {"offset": {"line": 626, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 631, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/apps/dashboard/components/ui/hover-border-gradient.tsx"],"sourcesContent":["'use client';\nimport React, { useState, useEffect, useRef } from 'react';\n\nimport { motion } from 'framer-motion';\nimport { cn } from '../../lib/utils';\n\ntype Direction = 'TOP' | 'LEFT' | 'BOTTOM' | 'RIGHT';\n\nexport function HoverBorderGradient({\n  children,\n  containerClassName,\n  className,\n  as: Tag = 'button',\n  duration = 1,\n  clockwise = true,\n  ...props\n}: React.PropsWithChildren<\n  {\n    as?: React.ElementType;\n    containerClassName?: string;\n    className?: string;\n    duration?: number;\n    clockwise?: boolean;\n  } & React.HTMLAttributes<HTMLElement>\n>) {\n  const [hovered, setHovered] = useState<boolean>(false);\n  const [direction, setDirection] = useState<Direction>('TOP');\n\n  const rotateDirection = (currentDirection: Direction): Direction => {\n    const directions: Direction[] = ['TOP', 'LEFT', 'BOTTOM', 'RIGHT'];\n    const currentIndex = directions.indexOf(currentDirection);\n    const nextIndex = clockwise\n      ? (currentIndex - 1 + directions.length) % directions.length\n      : (currentIndex + 1) % directions.length;\n    return directions[nextIndex];\n  };\n\n  const movingMap: Record<Direction, string> = {\n    TOP: 'radial-gradient(20.7% 50% at 50% 0%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)',\n    LEFT: 'radial-gradient(16.6% 43.1% at 0% 50%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)',\n    BOTTOM:\n      'radial-gradient(20.7% 50% at 50% 100%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)',\n    RIGHT:\n      'radial-gradient(16.2% 41.199999999999996% at 100% 50%, hsl(0, 0%, 100%) 0%, rgba(255, 255, 255, 0) 100%)'\n  };\n\n  const highlight =\n    'radial-gradient(75% 181.15942028985506% at 50% 50%, #3275F8 0%, rgba(255, 255, 255, 0) 100%)';\n\n  useEffect(() => {\n    if (!hovered) {\n      const interval = setInterval(() => {\n        setDirection((prevState) => rotateDirection(prevState));\n      }, duration * 1000);\n      return () => clearInterval(interval);\n    }\n  }, [hovered]);\n  return (\n    <Tag\n      onMouseEnter={(event: React.MouseEvent<HTMLDivElement>) => {\n        setHovered(true);\n      }}\n      onMouseLeave={() => setHovered(false)}\n      className={cn(\n        'relative flex rounded-full border  content-center bg-black/20 hover:bg-black/10 transition duration-500 dark:bg-white/20 items-center flex-col flex-nowrap gap-10 h-min justify-center overflow-visible p-px decoration-clone w-fit',\n        containerClassName\n      )}\n      {...props}\n    >\n      <div\n        className={cn(\n          'w-auto text-white z-10 bg-black px-4 py-2 rounded-[inherit]',\n          className\n        )}\n      >\n        {children}\n      </div>\n      <motion.div\n        className={cn(\n          'flex-none inset-0 overflow-hidden absolute z-0 rounded-[inherit]'\n        )}\n        style={{\n          filter: 'blur(2px)',\n          position: 'absolute',\n          width: '100%',\n          height: '100%'\n        }}\n        initial={{ background: movingMap[direction] }}\n        animate={{\n          background: hovered\n            ? [movingMap[direction], highlight]\n            : movingMap[direction]\n        }}\n        transition={{ ease: 'linear', duration: duration ?? 1 }}\n      />\n      <div className=\"bg-black absolute z-1 flex-none inset-[2px] rounded-[100px]\" />\n    </Tag>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;;;;AAQO,SAAS,oBAAoB,EAClC,QAAQ,EACR,kBAAkB,EAClB,SAAS,EACT,IAAI,MAAM,QAAQ,EAClB,WAAW,CAAC,EACZ,YAAY,IAAI,EAChB,GAAG,OASJ;IACC,MAAM,CAAC,SAAS,WAAW,GAAG,4NAAkB;IAChD,MAAM,CAAC,WAAW,aAAa,GAAG,4NAAoB;IAEtD,MAAM,kBAAkB,CAAC;QACvB,MAAM,aAA0B;YAAC;YAAO;YAAQ;YAAU;SAAQ;QAClE,MAAM,eAAe,WAAW,OAAO,CAAC;QACxC,MAAM,YAAY,YACd,CAAC,eAAe,IAAI,WAAW,MAAM,IAAI,WAAW,MAAM,GAC1D,CAAC,eAAe,CAAC,IAAI,WAAW,MAAM;QAC1C,OAAO,UAAU,CAAC,UAAU;IAC9B;IAEA,MAAM,YAAuC;QAC3C,KAAK;QACL,MAAM;QACN,QACE;QACF,OACE;IACJ;IAEA,MAAM,YACJ;IAEF,6NAAU;QACR,IAAI,CAAC,SAAS;YACZ,MAAM,WAAW,YAAY;gBAC3B,aAAa,CAAC,YAAc,gBAAgB;YAC9C,GAAG,WAAW;YACd,OAAO,IAAM,cAAc;QAC7B;IACF,GAAG;QAAC;KAAQ;IACZ,qBACE,mPAAC;QACC,cAAc,CAAC;YACb,WAAW;QACb;QACA,cAAc,IAAM,WAAW;QAC/B,WAAW,wIACT,uOACA;QAED,GAAG,KAAK;;0BAET,mPAAC;gBACC,WAAW,wIACT,+DACA;0BAGD;;;;;;0BAEH,mPAAC,qLAAO,GAAG;gBACT,WAAW,wIACT;gBAEF,OAAO;oBACL,QAAQ;oBACR,UAAU;oBACV,OAAO;oBACP,QAAQ;gBACV;gBACA,SAAS;oBAAE,YAAY,SAAS,CAAC,UAAU;gBAAC;gBAC5C,SAAS;oBACP,YAAY,UACR;wBAAC,SAAS,CAAC,UAAU;wBAAE;qBAAU,GACjC,SAAS,CAAC,UAAU;gBAC1B;gBACA,YAAY;oBAAE,MAAM;oBAAU,UAAU,YAAY;gBAAE;;;;;;0BAExD,mPAAC;gBAAI,WAAU;;;;;;;;;;;;AAGrB"}},
    {"offset": {"line": 731, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 736, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/apps/dashboard/utils/stripe/stripe-products.ts"],"sourcesContent":["import Stripe from 'stripe';\n\nconst stripe = new Stripe(process.env.NEXT_PUBLIC_STRIPE_SECRET_KEY as string, {\n  apiVersion: '2023-10-16'\n});\n\nexport const StripeProducts = async (\n  billingPeriod: Stripe.PriceListParams.Recurring.Interval = 'month'\n): Promise<Record<\n  'products',\n  Stripe.Product[]\n> | null> => {\n  if (!stripe) return Promise.reject('Stripe is not available');\n\n  let products: Stripe.Response<Stripe.ApiList<Stripe.Product>> =\n    await stripe.products.list({\n      active: true,\n      limit: 10\n    });\n    \n  if (!products) return Promise.reject('No products found');\n\n  // now we have the product ids, lets fetch the prices as there can be multiple\n  // billing periods for each product\n  const prices: Stripe.Response<Stripe.ApiList<Stripe.Price>> = await stripe.prices.list({\n    active: true,\n    limit: 10,\n    expand: ['data.product'],\n    recurring: {\n      interval: billingPeriod\n    }\n  });\n\n  // loop over all of the prices and match them to the product\n  prices.data.forEach((price) => {\n    // @ts-expect-error - the product object is expanded\n    const priceProductId = price.product.id\n\n    // find the product that matches the price\n    const product = products.data.find((product) => product.id === priceProductId);\n\n    // if we can't find the product, then we can't match the price\n    if(!product) return;\n\n    // match the price to the product\n    product.default_price = price\n  })\n\n  // once we have the products, lets sort them via the price\n  products.data.sort((productA, productB) => {\n    if (!productA.default_price || !productB.default_price) return 0;\n    return (\n      // @ts-ignore - we know that this is a field as we expand it in the list\n      productA.default_price.unit_amount - productB.default_price.unit_amount\n    );\n  });\n\n  return Promise.resolve({products: products.data})\n};\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,SAAS,uTAAgE;IAC7E,YAAY;AACd;AAEO,MAAM,iBAAiB,OAC5B,gBAA2D,OAAO;IAKlE,IAAI,CAAC,QAAQ,OAAO,QAAQ,MAAM,CAAC;IAEnC,IAAI,WACF,MAAM,OAAO,QAAQ,CAAC,IAAI,CAAC;QACzB,QAAQ;QACR,OAAO;IACT;IAEF,IAAI,CAAC,UAAU,OAAO,QAAQ,MAAM,CAAC;IAErC,8EAA8E;IAC9E,mCAAmC;IACnC,MAAM,SAAwD,MAAM,OAAO,MAAM,CAAC,IAAI,CAAC;QACrF,QAAQ;QACR,OAAO;QACP,QAAQ;YAAC;SAAe;QACxB,WAAW;YACT,UAAU;QACZ;IACF;IAEA,4DAA4D;IAC5D,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;QACnB,oDAAoD;QACpD,MAAM,iBAAiB,MAAM,OAAO,CAAC,EAAE;QAEvC,0CAA0C;QAC1C,MAAM,UAAU,SAAS,IAAI,CAAC,IAAI,CAAC,CAAC,UAAY,QAAQ,EAAE,KAAK;QAE/D,8DAA8D;QAC9D,IAAG,CAAC,SAAS;QAEb,iCAAiC;QACjC,QAAQ,aAAa,GAAG;IAC1B;IAEA,0DAA0D;IAC1D,SAAS,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU;QAC5B,IAAI,CAAC,SAAS,aAAa,IAAI,CAAC,SAAS,aAAa,EAAE,OAAO;QAC/D,OACE,wEAAwE;QACxE,SAAS,aAAa,CAAC,WAAW,GAAG,SAAS,aAAa,CAAC,WAAW;IAE3E;IAEA,OAAO,QAAQ,OAAO,CAAC;QAAC,UAAU,SAAS,IAAI;IAAA;AACjD"}},
    {"offset": {"line": 785, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 790, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/apps/dashboard/app/pricing/page.tsx"],"sourcesContent":["'use client';\n// react imports\nimport { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\n\n// component imports\nimport { PricingCard } from '../../components/payment/payment-card';\nimport { ButtonGroup } from '../../components/ui/button-group';\nimport { HoverBorderGradient } from '../../components/ui/hover-border-gradient';\n\n// redux imports\nimport { billingPeriod } from '@/store/user-store';\nimport { useAppSelector } from '@/lib/hooks';\n\n// action imports\nimport { StripeProducts } from '../../utils/stripe/stripe-products';\n// type imports\nimport { StripeProduct } from '../../types/StripeProduct';\n\nimport Stripe from 'stripe';\n\n// component\nexport default function PricingPage() {\n  const currentBillingPeriod = useAppSelector(billingPeriod);\n  const [products, setProducts] = useState<Record<\n    'products',\n    StripeProduct[]\n  > | null>(null);\n  const [loading, setLoading] = useState(true);\n  const setProductsFunc = async (\n    billingPeriod: Stripe.PriceListParams.Recurring.Interval = 'month'\n  ) => {\n    setLoading(true);\n    // TODO: fix this\n    // @ts-ignore\n    setProducts(await StripeProducts(billingPeriod));\n    setLoading(false);\n  };\n\n  // useEffect to fetch the products on mount (This may need to be changed)\n  useEffect(() => {\n    setProductsFunc();\n  }, []);\n\n  // a use effect to update the products when the billing period changes\n  useEffect(() => {\n    setProductsFunc(currentBillingPeriod);\n  }, [currentBillingPeriod]);\n\n  let pricingPlansGrid = 'grid w-full gap-x-8';\n\n  const tabs: {\n    title: string;\n    value: 'month' | 'year';\n  }[] = [\n    {\n      title: 'Monthly',\n      value: 'month'\n    },\n    {\n      title: 'Yearly',\n      value: 'year'\n    }\n  ];\n\n  return (\n    <>\n      <div className=\"flex flex-col h-full gap-y-10 text-white py-20\">\n        <div className=\"flex flex-col gap-y-6 w-full items-center\">\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.25 }}\n            className=\"flex gap-x-2 items-center\"\n          >\n            <HoverBorderGradient\n              containerClassName=\"rounded-full\"\n              className=\"bg-transparent border-none py-1 px-2.5 text-xs font-poppins\"\n            >\n              Pricing\n            </HoverBorderGradient>\n          </motion.div>\n          <div className=\"flex flex-col gap-y-3\">\n            <motion.div\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              <h3 className=\"font-poppins text-5xl font-bold text-center\">\n                Plans that grow with <br /> your business\n              </h3>\n            </motion.div>\n            <motion.div\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: 0.15 }}\n            >\n              <h4 className=\"font-poppins text-sm text-center text-white/60\">\n                {/* Design, build, deploy and analyse your digital product all from\n              one application. */}\n                Select from a range of payment plans to best suit your\n                businesses needs.\n              </h4>\n            </motion.div>\n          </div>\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.25 }}\n          >\n            <div className=\"mt-5 bg-electric-violet-900 rounded-2xl p-1 border border-white/20\">\n              <ButtonGroup\n                tabs={tabs}\n                tabClassName=\"[&>span]:!text-white py-2 px-12\"\n                activeTabClassName=\"bg-electric-violet-500 !text-white border border-electric-violet-300 rounded-xl\"\n              />\n            </div>\n          </motion.div>\n        </div>\n        <div className=\"flex gap-x-10 items-center justify-center self-center\">\n          <div\n            className={\n              pricingPlansGrid + ` grid-cols-${products?.products.length}`\n            }\n          >\n            {products?.products.map((product: StripeProduct, index) => (\n              <motion.div\n                key={product.id}\n                className=\"min-h-full\"\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.5, delay: index * 0.1 }}\n              >\n                <PricingCard\n                  key={product.id}\n                  product={product}\n                  isLoading={loading}\n                  billingPeriod={currentBillingPeriod}\n                />\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;AAsBe,SAAS;IACtB,MAAM,uBAAuB;IAC7B,MAAM,CAAC,UAAU,YAAY,GAAG,4NAGtB;IACV,MAAM,CAAC,SAAS,WAAW,GAAG,4NAAS;IACvC,MAAM,kBAAkB,OACtB,gBAA2D,OAAO;QAElE,WAAW;QACX,iBAAiB;QACjB,aAAa;QACb,YAAY,MAAM,6KAAe;QACjC,WAAW;IACb;IAEA,yEAAyE;IACzE,6NAAU;QACR;IACF,GAAG,EAAE;IAEL,sEAAsE;IACtE,6NAAU;QACR,gBAAgB;IAClB,GAAG;QAAC;KAAqB;IAEzB,IAAI,mBAAmB;IAEvB,MAAM,OAGA;QACJ;YACE,OAAO;YACP,OAAO;QACT;QACA;YACE,OAAO;YACP,OAAO;QACT;KACD;IAED,qBACE;kBACE,cAAA,mPAAC;YAAI,WAAU;;8BACb,mPAAC;oBAAI,WAAU;;sCACb,mPAAC,qLAAO,GAAG;4BACT,SAAS;gCAAE,SAAS;gCAAG,GAAG,CAAC;4BAAG;4BAC9B,SAAS;gCAAE,SAAS;gCAAG,GAAG;4BAAE;4BAC5B,YAAY;gCAAE,UAAU;gCAAK,OAAO;4BAAK;4BACzC,WAAU;sCAEV,cAAA;gCACE,oBAAmB;gCACnB,WAAU;0CACX;;;;;;;;;;;sCAIH,mPAAC;4BAAI,WAAU;;8CACb,mPAAC,qLAAO,GAAG;oCACT,SAAS;wCAAE,SAAS;wCAAG,GAAG,CAAC;oCAAG;oCAC9B,SAAS;wCAAE,SAAS;wCAAG,GAAG;oCAAE;oCAC5B,YAAY;wCAAE,UAAU;oCAAI;8CAE5B,cAAA,mPAAC;wCAAG,WAAU;;4CAA8C;0DACrC,mPAAC;;;;;4CAAK;;;;;;;;;;;;8CAG/B,mPAAC,qLAAO,GAAG;oCACT,SAAS;wCAAE,SAAS;wCAAG,GAAG,CAAC;oCAAG;oCAC9B,SAAS;wCAAE,SAAS;wCAAG,GAAG;oCAAE;oCAC5B,YAAY;wCAAE,UAAU;wCAAK,OAAO;oCAAK;8CAEzC,cAAA,mPAAC;wCAAG,WAAU;kDAEM;;;;;;;;;;;;;;;;;sCAMxB,mPAAC,qLAAO,GAAG;4BACT,SAAS;gCAAE,SAAS;gCAAG,GAAG,CAAC;4BAAG;4BAC9B,SAAS;gCAAE,SAAS;gCAAG,GAAG;4BAAE;4BAC5B,YAAY;gCAAE,UAAU;gCAAK,OAAO;4BAAK;sCAEzC,cAAA,mPAAC;gCAAI,WAAU;0CACb,cAAA;oCACE,MAAM;oCACN,cAAa;oCACb,oBAAmB;;;;;;;;;;;;;;;;;;;;;;8BAK3B,mPAAC;oBAAI,WAAU;8BACb,cAAA,mPAAC;wBACC,WACE,mBAAmB,CAAC,WAAW,EAAE,UAAU,SAAS,OAAO,CAAC;kCAG7D,UAAU,SAAS,IAAI,CAAC,SAAwB,sBAC/C,mPAAC,qLAAO,GAAG;gCAET,WAAU;gCACV,SAAS;oCAAE,SAAS;oCAAG,GAAG,CAAC;gCAAG;gCAC9B,SAAS;oCAAE,SAAS;oCAAG,GAAG;gCAAE;gCAC5B,YAAY;oCAAE,UAAU;oCAAK,OAAO,QAAQ;gCAAI;0CAEhD,cAAA;oCAEE,SAAS;oCACT,WAAW;oCACX,eAAe;mCAHV,QAAQ,EAAE;;;;;+BAPZ,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;AAmB/B"}},
    {"offset": {"line": 1038, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}